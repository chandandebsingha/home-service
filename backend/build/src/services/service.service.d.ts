import { services } from '../../build/drizzle/schema';
export declare class ServiceService {
    static ensureTable(): import("drizzle-orm/pg-core").PgTableWithColumns<{
        name: "services";
        schema: undefined;
        columns: {
            id: import("drizzle-orm/pg-core").PgColumn<{
                name: "id";
                tableName: "services";
                dataType: "number";
                columnType: "PgSerial";
                data: number;
                driverParam: number;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: true;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            name: import("drizzle-orm/pg-core").PgColumn<{
                name: "name";
                tableName: "services";
                dataType: "string";
                columnType: "PgText";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            description: import("drizzle-orm/pg-core").PgColumn<{
                name: "description";
                tableName: "services";
                dataType: "string";
                columnType: "PgText";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            price: import("drizzle-orm/pg-core").PgColumn<{
                name: "price";
                tableName: "services";
                dataType: "number";
                columnType: "PgInteger";
                data: number;
                driverParam: string | number;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            serviceType: import("drizzle-orm/pg-core").PgColumn<{
                name: "service_type";
                tableName: "services";
                dataType: "string";
                columnType: "PgText";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            categoryId: import("drizzle-orm/pg-core").PgColumn<{
                name: "category_id";
                tableName: "services";
                dataType: "number";
                columnType: "PgInteger";
                data: number;
                driverParam: string | number;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            serviceTypeId: import("drizzle-orm/pg-core").PgColumn<{
                name: "service_type_id";
                tableName: "services";
                dataType: "number";
                columnType: "PgInteger";
                data: number;
                driverParam: string | number;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            providerId: import("drizzle-orm/pg-core").PgColumn<{
                name: "provider_id";
                tableName: "services";
                dataType: "number";
                columnType: "PgInteger";
                data: number;
                driverParam: string | number;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            durationMinutes: import("drizzle-orm/pg-core").PgColumn<{
                name: "duration_minutes";
                tableName: "services";
                dataType: "number";
                columnType: "PgInteger";
                data: number;
                driverParam: string | number;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            availability: import("drizzle-orm/pg-core").PgColumn<{
                name: "availability";
                tableName: "services";
                dataType: "boolean";
                columnType: "PgBoolean";
                data: boolean;
                driverParam: boolean;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            timeSlots: import("drizzle-orm/pg-core").PgColumn<{
                name: "time_slots";
                tableName: "services";
                dataType: "string";
                columnType: "PgText";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            createdAt: import("drizzle-orm/pg-core").PgColumn<{
                name: "created_at";
                tableName: "services";
                dataType: "date";
                columnType: "PgTimestamp";
                data: Date;
                driverParam: string;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            updatedAt: import("drizzle-orm/pg-core").PgColumn<{
                name: "updated_at";
                tableName: "services";
                dataType: "date";
                columnType: "PgTimestamp";
                data: Date;
                driverParam: string;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
        };
        dialect: "pg";
    }>;
    static create(newService: typeof services.$inferInsert): Promise<{
        id: number;
        createdAt: Date;
        name: string;
        description: string | null;
        updatedAt: Date;
        categoryId: number | null;
        price: number;
        serviceType: string | null;
        serviceTypeId: number | null;
        providerId: number | null;
        durationMinutes: number | null;
        availability: boolean;
        timeSlots: string | null;
    }>;
    static list(limit?: number, offset?: number, filters?: {
        categoryId?: number;
        serviceTypeId?: number;
    }): Promise<{
        id: number;
        name: string;
        description: string | null;
        price: number;
        serviceType: string | null;
        categoryId: number | null;
        serviceTypeId: number | null;
        providerId: number | null;
        durationMinutes: number | null;
        availability: boolean;
        timeSlots: string | null;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    static getById(id: number): Promise<{
        id: number;
        name: string;
        description: string | null;
        price: number;
        serviceType: string | null;
        categoryId: number | null;
        serviceTypeId: number | null;
        providerId: number | null;
        durationMinutes: number | null;
        availability: boolean;
        timeSlots: string | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    static listByProvider(providerId: number): Promise<{
        id: number;
        name: string;
        description: string | null;
        price: number;
        serviceType: string | null;
        categoryId: number | null;
        serviceTypeId: number | null;
        providerId: number | null;
        durationMinutes: number | null;
        availability: boolean;
        timeSlots: string | null;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    static update(id: number, updates: Partial<typeof services.$inferInsert>): Promise<{
        id: number;
        name: string;
        description: string | null;
        price: number;
        serviceType: string | null;
        categoryId: number | null;
        serviceTypeId: number | null;
        providerId: number | null;
        durationMinutes: number | null;
        availability: boolean;
        timeSlots: string | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    static delete(id: number): Promise<boolean>;
}
//# sourceMappingURL=service.service.d.ts.map